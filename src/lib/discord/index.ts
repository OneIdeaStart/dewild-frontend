// src/lib/discord/index.ts
import axios from 'axios';
import { CollabApplication } from '@/types/collab';

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Discord API
type DiscordChannel = {
  id: string;
  name: string;
  type: number;
  guild_id: string;
  permission_overwrites: PermissionOverwrite[];
};

type DiscordUser = {
  id: string;
  username: string;
  discriminator: string;
};

type PermissionOverwrite = {
  id: string;
  type: number; // 0 –¥–ª—è —Ä–æ–ª–∏, 1 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  allow: string;
  deny: string;
};

// Discord API –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const CHANNEL_TYPE_TEXT = 0;
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–æ BigInt –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
const PERMISSION_VIEW_CHANNEL = "1024"; // (1 << 10)
const PERMISSION_SEND_MESSAGES = "2048"; // (1 << 11)
const PERMISSION_READ_MESSAGE_HISTORY = "65536"; // (1 << 16)
const PERMISSION_ADD_REACTIONS = "64"; // (1 << 6)

export class DiscordService {
  private token: string;
  private guildId: string;
  private dewildOneRoleId: string;
  private applicationsCategoryId: string;
  private botRoleId: string;

  constructor() {
    this.token = process.env.DISCORD_BOT_TOKEN || '';
    this.guildId = process.env.DISCORD_SERVER_ID || '';
    this.dewildOneRoleId = process.env.DISCORD_DEWILD_ONE_ROLE_ID || '';
    this.applicationsCategoryId = process.env.DISCORD_APPLICATIONS_CATEGORY_ID || '';
    this.botRoleId = process.env.DISCORD_BOT_ROLE_ID || '';

    if (!this.token || !this.guildId) {
      console.error('Discord service initialized without required environment variables');
    }
  }

  private get headers() {
    return {
      'Authorization': `Bot ${this.token}`,
      'Content-Type': 'application/json',
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Discord —Ç–µ–≥—É (username#discriminator)
   */
  async getUserIdByUsername(discordTag: string): Promise<string | null> {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä
      const [username, discriminator] = discordTag.split('#');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ API Discord
      const response = await axios.get<any[]>(
        `https://discord.com/api/v10/guilds/${this.guildId}/members?limit=1000`,
        { headers: this.headers }
      );
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ response.data —ç—Ç–æ –º–∞—Å—Å–∏–≤
      if (!Array.isArray(response.data)) {
        console.error('Unexpected response format from Discord API:', response.data);
        return null;
      }
      
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä—É
      const member = response.data.find((m: any) => {
        if (!m.user) return false;
        const user = m.user;
        return user.username === username && 
               (discriminator ? user.discriminator === discriminator : true);
      });
      
      return member && member.user ? member.user.id : null;
    } catch (error) {
      console.error('Failed to get Discord user ID:', error);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–∫–∏ –∞—Ä—Ç–∏—Å—Ç–∞
   */
  async createApplicationChannel(application: CollabApplication): Promise<string | null> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = await this.getUserIdByUsername(application.discord);
      if (!userId) {
        console.error(`User ${application.discord} not found in Discord server`);
        return null;
      }

      // –°–æ–∑–¥–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –∑–∞—è–≤–∫–∏
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å app- –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –∑–∞—è–≤–æ–∫
      const channelName = `app-${application.id}`;

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      // 1. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∫–∞–Ω–∞–ª —Å–∫—Ä—ã—Ç –æ—Ç –≤—Å–µ—Ö (@everyone)
      // 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–¥–∞–≤—à–∏–π –∑–∞—è–≤–∫—É, –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
      // 3. –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –±–æ—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
      const permissionOverwrites = [
        {
          id: this.guildId, // @everyone —Ä–æ–ª—å
          type: 0, // —Ç–∏–ø "—Ä–æ–ª—å"
          allow: '0',
          deny: PERMISSION_VIEW_CHANNEL // –°–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª
        },
        {
          id: userId,
          type: 1, // —Ç–∏–ø "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
          // –í –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Å—É–º–º–∞—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          allow: "68672", // 1024 + 2048 + 65536 + 64
          deny: '0'
        }
      ];

      // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ —Ä–æ–ª—å –±–æ—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      if (this.botRoleId) {
        permissionOverwrites.push({
          id: this.botRoleId,
          type: 0, // —Ç–∏–ø "—Ä–æ–ª—å"
          allow: "68672", // –¢–∞–∫–∏–µ –∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–∞–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          deny: '0'
        });
      }

      // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ API Discord
      const response = await axios.post<{ id: string }>(
        `https://discord.com/api/v10/guilds/${this.guildId}/channels`,
        {
          name: channelName,
          type: CHANNEL_TYPE_TEXT,
          parent_id: this.applicationsCategoryId, // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∑–∞—è–≤–æ–∫
          permission_overwrites: permissionOverwrites,
          topic: `Application channel for ${application.discord} (${application.twitter})`,
          sync_permissions: true // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        },
        { headers: this.headers }
      );

      const channelId = response.data.id;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–µ
      await this.sendApplicationStatusMessage(channelId, application);
      
      return channelId;
    } catch (error) {
      console.error('Failed to create application channel:', error);
      return null;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª
   */
  async sendApplicationStatusMessage(channelId: string, application: CollabApplication): Promise<boolean> {
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
      const message = this.getStatusMessage(application);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await axios.post(
        `https://discord.com/api/v10/channels/${channelId}/messages`,
        { content: message },
        { headers: this.headers }
      );
      
      return true;
    } catch (error) {
      console.error('Failed to send application status message:', error);
      return false;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–∫–∏
   * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ
   */
  async updateApplicationStatusMessage(channelId: string, application: CollabApplication): Promise<boolean> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
      const messagesResponse = await axios.get<any[]>(
        `https://discord.com/api/v10/channels/${channelId}/messages?limit=10`,
        { headers: this.headers }
      );
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ response.data —ç—Ç–æ –º–∞—Å—Å–∏–≤
      if (!Array.isArray(messagesResponse.data)) {
        console.error('Unexpected response format from Discord API:', messagesResponse.data);
        // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return await this.sendApplicationStatusMessage(channelId, application);
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
      const botMessages = messagesResponse.data.filter((msg: any) => msg.author && msg.author.bot === true);
      if (botMessages.length === 0) {
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        return await this.sendApplicationStatusMessage(channelId, application);
      }
      
      const lastBotMessage = botMessages[0];
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message = this.getStatusMessage(application);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await axios.patch(
        `https://discord.com/api/v10/channels/${channelId}/messages/${lastBotMessage.id}`,
        { content: message },
        { headers: this.headers }
      );
      
      return true;
    } catch (error) {
      console.error('Failed to update application status message:', error);
      return false;
    }
  }

  /**
   * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–∫–∏
   */
  private getStatusMessage(application: CollabApplication): string {
    const statusEmoji = this.getStatusEmoji(application.status);
    const created = new Date(application.createdAt).toLocaleString('ru-RU');
    
    let message = `# DeWild Application: ${application.id}\n\n`;
    message += `üë§ **Discord**: ${application.discord}\n`;
    message += `üê¶ **Twitter**: ${application.twitter}\n`;
    message += `üíº **Wallet**: \`${application.wallet}\`\n`;
    message += `‚è±Ô∏è **Created**: ${created}\n\n`;
    
    message += `## Current Status: ${statusEmoji} ${this.formatStatus(application.status)}\n\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    switch (application.status) {
      case 'pending':
        message += `Your application is being reviewed by our team. Please be patient.\n`;
        break;
      case 'approved':
        message += `Congratulations! Your application has been approved. You can now proceed to the next step and submit your NFT design.\n`;
        break;
      case 'rejected':
        message += `We're sorry, but your application has been rejected. If you think this is a mistake, please contact our team.\n`;
        break;
      case 'prompt_received':
        message += `You've received a prompt for your NFT. Please check your dashboard to proceed with creation.\n`;
        if (application.promptAssignedAt) {
          const promptDate = new Date(application.promptAssignedAt).toLocaleString('ru-RU');
          message += `üìã **Prompt received**: ${promptDate}\n`;
        }
        break;
      case 'nft_pending':
        message += `Your NFT design has been submitted and is currently under review. We'll update you soon.\n`;
        if (application.imageUploadedAt) {
          const uploadDate = new Date(application.imageUploadedAt).toLocaleString('ru-RU');
          message += `üñºÔ∏è **Design submitted**: ${uploadDate}\n`;
        }
        break;
      case 'nft_approved':
        message += `Great news! Your NFT design has been approved. You can now mint your NFT on our platform.\n`;
        break;
      case 'nft_rejected':
        message += `Your NFT design was not approved. Please check your dashboard for feedback and try again.\n`;
        break;
      case 'minted':
        message += `üéâ Congratulations! Your NFT has been successfully minted and is now part of the DeWild collection.\n`;
        if (application.mintedAt) {
          const mintDate = new Date(application.mintedAt).toLocaleString('ru-RU');
          message += `‚õìÔ∏è **Minted on**: ${mintDate}\n`;
        }
        break;
      default:
        message += `Application is being processed.\n`;
    }
    
    message += `\n> Check your dashboard at https://dewild.club/dashboard for more details.`;
    
    return message;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
   */
  private getStatusEmoji(status: string): string {
    switch (status) {
      case 'pending': return '‚è≥';
      case 'approved': return '‚úÖ';
      case 'rejected': return '‚ùå';
      case 'prompt_received': return 'üìù';
      case 'prompt_expired': return '‚è∞';
      case 'nft_pending': return 'üîç';
      case 'nft_approved': return 'üé®';
      case 'nft_rejected': return 'üö´';
      case 'minted': return 'üèÜ';
      case 'unminted': return 'üì¶';
      default: return '‚ùì';
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private formatStatus(status: string): string {
    switch (status) {
      case 'pending': return 'Pending Review';
      case 'approved': return 'Application Approved';
      case 'rejected': return 'Application Rejected';
      case 'prompt_received': return 'Prompt Received';
      case 'prompt_expired': return 'Prompt Expired';
      case 'nft_pending': return 'NFT Design Under Review';
      case 'nft_approved': return 'NFT Design Approved';
      case 'nft_rejected': return 'NFT Design Rejected';
      case 'minted': return 'NFT Minted';
      case 'unminted': return 'Ready for Minting';
      default: return status.charAt(0).toUpperCase() + status.slice(1);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
   */
  async updateUserRole(discordTag: string, applicationStatus: string): Promise<boolean> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = await this.getUserIdByUsername(discordTag);
      if (!userId) {
        console.error(`User ${discordTag} not found in Discord server`);
        return false;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
      let roleId = '';
      
      switch (applicationStatus) {
        case 'approved':
          roleId = process.env.DISCORD_DEWILD_PROSPECT_ROLE_ID || '';
          break;
        case 'minted':
          roleId = process.env.DISCORD_DEWILD_ARTIST_ROLE_ID || '';
          break;
        default:
          // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ –º–µ–Ω—è–µ–º —Ä–æ–ª—å
          return true;
      }
      
      if (!roleId) {
        console.warn(`Role ID not configured for status: ${applicationStatus}`);
        return false;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await axios.put(
        `https://discord.com/api/v10/guilds/${this.guildId}/members/${userId}/roles/${roleId}`,
        {},
        { headers: this.headers }
      );
      
      return true;
    } catch (error) {
      console.error('Failed to update user role:', error);
      return false;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª –≤ Discord
   */
  async deleteChannel(channelId: string): Promise<boolean> {
    try {
      // –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ API Discord
      await axios.delete(
        `https://discord.com/api/v10/channels/${channelId}`,
        { headers: this.headers }
      );
      
      return true;
    } catch (error) {
      return false;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç–∞–Ω—Å —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export const discordService = new DiscordService();