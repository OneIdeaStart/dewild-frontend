// src/scripts/discord-migration.ts
import 'dotenv/config';
import { kv } from '@vercel/kv';
import axios from 'axios';

// –¢–∏–ø—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
interface CollabApplication {
  id: string;
  wallet: string;
  twitter: string;
  discord: string;
  status: string;
  createdAt: string;
  discordChannelId?: string;
  moderatorVotes: Array<{
    discordId: string;
    vote: 'approve' | 'reject';
    votedAt: string;
    comment?: string;
  }>;
  promptId?: string;
  promptAssignedAt?: string;
  imageUrl?: string;
  imageUploadedAt?: string;
  mintedAt?: string;
  metadata?: any;
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ DB –∫–ª–∞—Å—Å–∞
const DB_KEYS = {
  ALL_APPLICATIONS: 'applications:all',
  // –°—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ –¥–ª—è –º—ç–ø–ø–∏–Ω–≥–∞ (–±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏)
  APPLICATION_CHANNEL_MAP: 'discord:application:channel',
  CHANNEL_APPLICATION_MAP: 'discord:channel:application',
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Discord API
const CHANNEL_TYPE_TEXT = 0;
const PERMISSION_VIEW_CHANNEL = "1024"; // (1 << 10)
const PERMISSION_SEND_MESSAGES = "2048"; // (1 << 11)
const PERMISSION_READ_MESSAGE_HISTORY = "65536"; // (1 << 16)
const PERMISSION_ADD_REACTIONS = "64"; // (1 << 6)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø–æ ID
async function getApplicationById(id: string): Promise<CollabApplication | null> {
  try {
    const record = await kv.hgetall<any>(`application:${id}`);
    if (!record) return null;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø–∏—Å—å –∏–∑ Redis –≤ CollabApplication
    const application: CollabApplication = {
      id: record.id,
      wallet: record.wallet,
      twitter: record.twitter,
      discord: record.discord,
      status: record.status,
      createdAt: record.createdAt,
      discordChannelId: record.discordChannelId,
      moderatorVotes: record.moderatorVotes || [],
      promptId: record.promptId,
      promptAssignedAt: record.promptAssignedAt,
      imageUrl: record.imageUrl,
      imageUploadedAt: record.imageUploadedAt,
      mintedAt: record.mintedAt,
      metadata: record.metadata
    };
  
    // –ï—Å–ª–∏ metadata —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –µ—ë –≤ –æ–±—ä–µ–∫—Ç
    if (application.metadata && typeof application.metadata === 'string') {
      try {
        application.metadata = JSON.parse(application.metadata as string);
      } catch (e) {
        // –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        console.warn('Error parsing metadata for application', id);
      }
    }
  
    return application;
  } catch (error) {
    console.error('Error getting application by ID:', error);
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö ID –∑–∞—è–≤–æ–∫
async function getAllApplicationIds(): Promise<string[]> {
  try {
    return await kv.smembers(DB_KEYS.ALL_APPLICATIONS);
  } catch (error) {
    console.error('Error getting all application IDs:', error);
    return [];
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
async function updateApplication(id: string, updates: Partial<CollabApplication>): Promise<boolean> {
  try {
    await kv.hset(`application:${id}`, updates);
    return true;
  } catch (error) {
    console.error(`Failed to update application ${id}:`, error);
    return false;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ Discord –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ (–∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã –º–∞–ø–ø–∏–Ω–≥–æ–≤)
async function getOldApplicationChannel(applicationId: string): Promise<string | null> {
  try {
    return kv.hget<string>(DB_KEYS.APPLICATION_CHANNEL_MAP, applicationId);
  } catch (error) {
    console.error('Error getting application channel:', error);
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ —Ç–µ–≥—É
async function getUserIdByUsername(discordTag: string): Promise<string | null> {
  try {
    const [username, discriminator] = discordTag.split('#');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ API Discord
    const response = await axios.get<any[]>(
      `https://discord.com/api/v10/guilds/${process.env.DISCORD_SERVER_ID}/members?limit=1000`,
      { 
        headers: {
          'Authorization': `Bot ${process.env.DISCORD_BOT_TOKEN}`,
          'Content-Type': 'application/json',
        }
      }
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ response.data —ç—Ç–æ –º–∞—Å—Å–∏–≤
    if (!Array.isArray(response.data)) {
      console.error('Unexpected response format from Discord API:', response.data);
      return null;
    }
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä—É
    const member = response.data.find((m: any) => {
      if (!m.user) return false;
      const user = m.user;
      return user.username === username && 
             (discriminator ? user.discriminator === discriminator : true);
    });
    
    return member && member.user ? member.user.id : null;
  } catch (error) {
    console.error('Failed to get Discord user ID:', error);
    return null;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∑–∞—è–≤–∫–∏
async function createApplicationChannel(application: CollabApplication): Promise<string | null> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = await getUserIdByUsername(application.discord);
    if (!userId) {
      console.error(`User ${application.discord} not found in Discord server`);
      return null;
    }

    // –°–æ–∑–¥–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –∑–∞—è–≤–∫–∏
    const channelName = `app-${application.id}`;

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const permissionOverwrites = [
        {
          id: process.env.DISCORD_SERVER_ID!, // @everyone —Ä–æ–ª—å
          type: 0, // —Ç–∏–ø "—Ä–æ–ª—å"
          allow: '0',
          deny: PERMISSION_VIEW_CHANNEL // –°–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –æ—Ç –≤—Å–µ—Ö
        },
        {
          id: userId, // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          type: 1, // —Ç–∏–ø "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
          allow: "68672", // VIEW_CHANNEL + SEND_MESSAGES + READ_MESSAGE_HISTORY + ADD_REACTIONS
          deny: '0'
        }
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–¥–∞–Ω–∞
    if (process.env.DISCORD_BOT_ROLE_ID) {
      permissionOverwrites.push({
        id: process.env.DISCORD_BOT_ROLE_ID,
        type: 0, // —Ç–∏–ø "—Ä–æ–ª—å"
        allow: "68672",
        deny: '0'
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–æ–≥–æ –±–æ—Ç–∞, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω CLIENT_ID
    if (process.env.DISCORD_CLIENT_ID) {
      permissionOverwrites.push({
        id: process.env.DISCORD_CLIENT_ID,
        type: 1, // —Ç–∏–ø "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" –¥–ª—è –±–æ—Ç–∞
        allow: "68672",
        deny: '0'
      });
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ API Discord
    const response = await axios.post<{ id: string }>(
      `https://discord.com/api/v10/guilds/${process.env.DISCORD_SERVER_ID}/channels`,
      {
        name: channelName,
        type: CHANNEL_TYPE_TEXT,
        parent_id: process.env.DISCORD_APPLICATIONS_CATEGORY_ID, // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∑–∞—è–≤–æ–∫
        permission_overwrites: permissionOverwrites,
        sync_permissions: true
      },
      { 
        headers: {
          'Authorization': `Bot ${process.env.DISCORD_BOT_TOKEN}`,
          'Content-Type': 'application/json',
        }
      }
    );

    const channelId = response.data.id;
    
    // –î–∞–µ–º Discord –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–µ
    await sendApplicationStatusMessage(channelId, application);
    
    return channelId;
  } catch (error) {
    console.error('Failed to create application channel:', error);
    return null;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–∫–∏
async function sendApplicationStatusMessage(channelId: string, application: CollabApplication): Promise<boolean> {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
    const message = getStatusMessage(application);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API Discord
    await axios.post(
      `https://discord.com/api/v10/channels/${channelId}/messages`,
      { content: message },
      { 
        headers: {
          'Authorization': `Bot ${process.env.DISCORD_BOT_TOKEN}`,
          'Content-Type': 'application/json',
        }
      }
    );
    
    return true;
  } catch (error) {
    console.error('Failed to send application status message:', error);
    return false;
  }
}

// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–∫–∏
function getStatusMessage(application: CollabApplication): string {
  const statusEmoji = getStatusEmoji(application.status);
  const created = new Date(application.createdAt).toLocaleString('ru-RU');
  
  let message = `# DeWild Application: ${application.id}\n\n`;
  message += `üë§ **Discord**: ${application.discord}\n`;
  message += `üê¶ **Twitter**: ${application.twitter}\n`;
  message += `üíº **Wallet**: \`${application.wallet}\`\n`;
  message += `‚è±Ô∏è **Created**: ${created}\n\n`;
  
  message += `## Current Status: ${statusEmoji} ${formatStatus(application.status)}\n\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
  switch (application.status) {
    case 'pending':
      message += `Your application is being reviewed by our team. Please be patient.\n`;
      break;
    case 'approved':
      message += `Congratulations! Your application has been approved. You can now proceed to the next step and submit your NFT design.\n`;
      break;
    case 'rejected':
      message += `We're sorry, but your application has been rejected. If you think this is a mistake, please contact our team.\n`;
      break;
    case 'prompt_received':
      message += `You've received a prompt for your NFT. Please check your dashboard to proceed with creation.\n`;
      if (application.promptAssignedAt) {
        const promptDate = new Date(application.promptAssignedAt).toLocaleString('ru-RU');
        message += `üìã **Prompt received**: ${promptDate}\n`;
      }
      break;
    case 'nft_pending':
      message += `Your NFT design has been submitted and is currently under review. We'll update you soon.\n`;
      if (application.imageUploadedAt) {
        const uploadDate = new Date(application.imageUploadedAt).toLocaleString('ru-RU');
        message += `üñºÔ∏è **Design submitted**: ${uploadDate}\n`;
      }
      break;
    case 'nft_approved':
      message += `Great news! Your NFT design has been approved. You can now mint your NFT on our platform.\n`;
      break;
    case 'nft_rejected':
      message += `Your NFT design was not approved. Please check your dashboard for feedback and try again.\n`;
      break;
    case 'minted':
      message += `üéâ Congratulations! Your NFT has been successfully minted and is now part of the DeWild collection.\n`;
      if (application.mintedAt) {
        const mintDate = new Date(application.mintedAt).toLocaleString('ru-RU');
        message += `‚õìÔ∏è **Minted on**: ${mintDate}\n`;
      }
      break;
    default:
      message += `Application is being processed.\n`;
  }
  
  message += `\n> Check your dashboard at https://dewild.club/dashboard for more details.`;
  
  return message;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
function getStatusEmoji(status: string): string {
  switch (status) {
    case 'pending': return '‚è≥';
    case 'approved': return '‚úÖ';
    case 'rejected': return '‚ùå';
    case 'prompt_received': return 'üìù';
    case 'prompt_expired': return '‚è∞';
    case 'nft_pending': return 'üîç';
    case 'nft_approved': return 'üé®';
    case 'nft_rejected': return 'üö´';
    case 'minted': return 'üèÜ';
    case 'unminted': return 'üì¶';
    default: return '‚ùì';
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
function formatStatus(status: string): string {
  switch (status) {
    case 'pending': return 'Pending Review';
    case 'approved': return 'Application Approved';
    case 'rejected': return 'Application Rejected';
    case 'prompt_received': return 'Prompt Received';
    case 'prompt_expired': return 'Prompt Expired';
    case 'nft_pending': return 'NFT Design Under Review';
    case 'nft_approved': return 'NFT Design Approved';
    case 'nft_rejected': return 'NFT Design Rejected';
    case 'minted': return 'NFT Minted';
    case 'unminted': return 'Ready for Minting';
    default: return status.charAt(0).toUpperCase() + status.slice(1);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateUserRole(discordTag: string, applicationStatus: string): Promise<boolean> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = await getUserIdByUsername(discordTag);
    if (!userId) {
      console.error(`User ${discordTag} not found in Discord server`);
      return false;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
    let roleId = '';
    
    switch (applicationStatus) {
      case 'approved':
        roleId = process.env.DISCORD_DEWILD_PROSPECT_ROLE_ID || '';
        break;
      case 'minted':
        roleId = process.env.DISCORD_DEWILD_ARTIST_ROLE_ID || '';
        break;
      default:
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ –º–µ–Ω—è–µ–º —Ä–æ–ª—å
        return true;
    }
    
    if (!roleId) {
      console.warn(`Role ID not configured for status: ${applicationStatus}`);
      return false;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await axios.put(
      `https://discord.com/api/v10/guilds/${process.env.DISCORD_SERVER_ID}/members/${userId}/roles/${roleId}`,
      {},
      { 
        headers: {
          'Authorization': `Bot ${process.env.DISCORD_BOT_TOKEN}`,
          'Content-Type': 'application/json',
        }
      }
    );
    
    return true;
  } catch (error) {
    console.error('Failed to update user role:', error);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
async function migrateApplicationsToDiscord() {
  try {
    console.log('Starting Discord channels migration...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –∑–∞—è–≤–æ–∫
    const applicationIds = await getAllApplicationIds();
    console.log(`Found ${applicationIds.length} applications`);
    
    // –°—á–µ—Ç—á–∏–∫–∏
    let created = 0;
    let skipped = 0;
    let errors = 0;
    let migrated = 0;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞—è–≤–∫—É
    for (const id of applicationIds) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        const app = await getApplicationById(id);
        if (!app) {
          console.error(`Application ${id} not found`);
          errors++;
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ ID –∫–∞–Ω–∞–ª–∞ –≤ –∑–∞—è–≤–∫–µ
        if (app.discordChannelId) {
          console.log(`Application ${id} already has Discord channel ID: ${app.discordChannelId}`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–∞–Ω–∞–ª–µ
          try {
            await sendApplicationStatusMessage(app.discordChannelId, app);
            console.log(`Status message updated in channel ${app.discordChannelId}`);
          } catch (msgError) {
            console.error(`Error updating status in channel ${app.discordChannelId}:`, msgError);
          }
          
          skipped++;
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–Ω–∞–ª –≤ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ –º–∞–ø–ø–∏–Ω–≥–æ–≤
        const oldChannelId = await getOldApplicationChannel(id);
        if (oldChannelId) {
          console.log(`Found channel ${oldChannelId} for application ${id} in old mapping, migrating...`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —Å ID –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
          await updateApplication(id, { discordChannelId: oldChannelId });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
          try {
            await sendApplicationStatusMessage(oldChannelId, app);
            console.log(`Status message updated in channel ${oldChannelId}`);
          } catch (msgError) {
            console.error(`Error updating status in channel ${oldChannelId}:`, msgError);
          }
          
          migrated++;
          continue;
        }
        
        // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –Ω–∏ –≤ –∑–∞—è–≤–∫–µ, –Ω–∏ –≤ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        console.log(`Creating new Discord channel for application ${id}...`);
        const channelId = await createApplicationChannel(app);
        
        if (!channelId) {
          console.error(`Failed to create channel for application ${id}`);
          errors++;
          continue;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–Ω–∞–ª–∞ –≤ –∑–∞—è–≤–∫–µ
        await updateApplication(id, { discordChannelId: channelId });
        
        console.log(`Created channel ${channelId} for application ${id}`);
        created++;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (app.status === 'approved' || app.status === 'minted') {
          await updateUserRole(app.discord, app.status);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å Discord API
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.error(`Error processing application ${id}:`, error);
        errors++;
      }
    }
    
    console.log('\nMigration complete!');
    console.log(`Created new channels: ${created}`);
    console.log(`Migrated from old mapping: ${migrated}`);
    console.log(`Skipped (already have channel): ${skipped}`);
    console.log(`Errors: ${errors}`);
    
  } catch (error) {
    console.error('Migration failed:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateApplicationsToDiscord()
  .then(() => {
    console.log('Migration completed successfully');
    process.exit(0);
  })
  .catch(error => {
    console.error('Unhandled error during migration:', error);
    process.exit(1);
  });